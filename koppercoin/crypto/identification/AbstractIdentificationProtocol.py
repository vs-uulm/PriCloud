"""
This class implements Homomorphic Identification Protocols as defined in 

Ateniese, Kamara, Katz: "Proofs of Storage from Homomorphic Identification Protocols",
ASIACRYPT 2009
http://dx.doi.org/10.1007/978-3-642-10366-7_19
"""

from abc import ABCMeta, abstractmethod

class AbstractIdP(metaclass=ABCMeta):
    @staticmethod
    @abstractmethod
    def setup():
        """Computes a (public, private)-keypair. If you want to
        generate a linear authenticator later, you have to set the
        entry public[-1] to the modulus of the field."""
        pass

    @staticmethod
    @abstractmethod
    def comm(publickey, r):
        """is a probabilistic algorithm run by the prover to generate
        the first message. The input is the public key and a nonce r.
        The nonce is a bytestring.
        """
        pass

    @staticmethod
    @abstractmethod
    def genChallenge(nonce):
        """returns a challenge. This function is originally not in the
        paper by Ateniese et al., but makes the interface nicer.
        The nonce is a bytestring.
        """
        pass

    @staticmethod
    @abstractmethod
    def resp(publickey, secretkey, r, challenge):
        """is a probabilistic algorithm run by the prover to generate
        the third message. The input is the public key, the secret
        key, as well as a nonce r and the challenge itself, generted
        by genChallenge.
        """
        pass

    @staticmethod
    @abstractmethod
    def vrfy(publickey, comm, challenge, resp):
        """is the algorithm used to verify the interaction.

        :param publickey: the public key
        :param comm: is the second message (commit) generated by the prover with Comm. 
        :param challenge: the challenge generated by genChallenge.
        :param resp: the response generated by the prover with Resp.
        :returns: True iff the interaction is valid.
        """
        pass

    @staticmethod
    @abstractmethod
    def combine_1(c, alpha):
        """Since this is about homomorphic identification protocols,
        we need to have combiner functions. The notation for this is
        straight out of the paper. Combine_1 combines the commits comm.
        Combine_3 is used to Combine the responses Resp.

        Note that there is not Combine_2. The challenges are combined
        by a simple linear combination.
        If any of this is not clear, please read the paper mentioned
        above.
        The lengths of c and alpha need to agree.
        
        :param c: a coefficient vector to aggregate the commits.
        :param alpha: a list of Commits output by Comm
        """
        pass

    @staticmethod
    @abstractmethod
    def combine_3(c, gamma):
        """Combine_3 is used to Combine the responses Resp.

        The lengths of c and gamma need to agree.
        :param c: a coefficient vector to aggregate the commits.
        :param gamma: a list of responses output by Resp.
        """
        pass
